package com.example.jasperdemo;

import com.example.jasperdemo.controller.JasperServerResource;
import com.example.jasperdemo.domain.DataSource;
import com.example.jasperdemo.domain.JasperReport;
import com.example.jasperdemo.repository.DataSourceRepository;
import com.example.jasperdemo.repository.JasperReportRepository;
import com.example.jasperdemo.service.DataSourceDto;
import com.example.jasperdemo.service.ReportDto;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.ResponseEntity;

@SpringBootTest
class JasperDemoApplicationTests {


    @Autowired
    private DataSourceRepository dataSourceRepository;

    @Autowired
    private JasperServerResource jasperServerResource;
    private final Logger log = LoggerFactory.getLogger(JasperDemoApplicationTests.class);


    @Test
    void getAllDataSources() {
        dataSourceRepository.findAll().forEach(dataSource -> {
            log.info(dataSource.toString());
        });
    }

    @Test
    void addNewDataSource() {
        DataSourceDto dto = new DataSourceDto(
                "docstore_from_test",
                "org.postgresql.Driver",
                "daniel", "daniel",
                "jdbc:postgresql://localhost:5432/docstore_playground");
        ResponseEntity<DataSource> response = jasperServerResource.addNewDataSource(dto);
        log.info(response.getStatusCode().toString());
    }

    @Test
    void addNewReport() {
        DataSource testDataSource = dataSourceRepository.findFirstByLabel("docstore_from_test").orElseThrow();
        ReportDto dto = new ReportDto(
                "report_name_from_test",
                "jrxml",
                "",
                testDataSource.getId()
        );
        ResponseEntity<JasperReport> response = jasperServerResource.uploadReport(dto);
        log.info(response.getStatusCode().toString());
    }

//    @Test
//    @Transactional
//    void removeAddedDataSourceAndJasperReport(){
//        jasperReportRepository.deleteAllByNameContaining("report_name_from_test");
//        dataSourceRepository.deleteAllByLabelContaining("docstore_from_test");
//        jasperReportRepository.flush();
//        dataSourceRepository.flush();
//    }


}
